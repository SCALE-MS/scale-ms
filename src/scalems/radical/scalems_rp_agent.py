"""Provide the entry point for SCALE-MS execution management under RADICAL Pilot."""

import logging
import sys
from typing import Any
from typing import Dict
from typing import NamedTuple
from typing import Sequence

import radical.pilot as rp
import radical.utils as ru

logger = logging.getLogger('scalems_rp_agent')


class PilotDescription(NamedTuple):
    """What is the role of the this in the raptor.Master config?"""
    runtime: int = 30  # ?
    resource: str = 'local.localhost'  # Target resource


class WorkerDescription(NamedTuple):
    """Describe the Raptor worker task."""
    executable: str = 'scalems_rp_worker'  # Executable to launch.
    arguments: Sequence[str] = ()  # Arguments passed to executable.
    pre_exec: Sequence[str] = ()  # Shell commands to run in the wrapper script before executable.


class SchedulerConfig(NamedTuple, object):
    cpn: int = 4  # CPUs per node
    gpn: int = 0  # GPUs per node
    n_masters: int = 1  # Number of Raptor Master tasks
    n_workers: int = 1  # Number of Raptor Worker tasks
    pilot_descr: PilotDescription = PilotDescription()  # ?
    worker_descr: WorkerDescription = WorkerDescription()  # Specify the Worker(s) to launch.


def encode_as_dict(config: NamedTuple):
    data = config._asdict()
    for key, value in data.items():
        if hasattr(value, '_asdict'):
            data[key] = encode_as_dict(value)
    return data


class ScaleMSMaster(rp.raptor.Master):

    def __init__(self, cfg):
        rp.raptor.Master.__init__(self, cfg=cfg)

        self._log = ru.Logger(self.uid, ns='radical.pilot')

    def result_cb(self, requests):
        for r in requests:
            r['task']['stdout'] = r['out']

            logger.info('result_cb %s: %s [%s]' % (r.uid, r.state, r.result))


def main():
    cfg = ru.Config(cfg=ru.read_json(sys.argv[1]))
    master = ScaleMSMaster(cfg)

    master.submit(descr=cfg.worker_descr, count=cfg.n_workers,
                  cores=cfg.cpn, gpus=cfg.gpn)

    master.start()
    master.join()
    master.stop()


if __name__ == '__main__':
    # Note: This block is only the entry point for, e.g. `python -m scalems.radical.scalems_rp_agent`
    # When invoked using the installed console script entry point, main() is called directly
    # by installed wrapper script generated by setuptools.

    # For additional console logging, create and attach a stream handler.
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    ch = logging.StreamHandler()
    ch.setFormatter(formatter)
    logging.getLogger().addHandler(ch)
    # Should we be interacting with the RP logger?

    sys.exit(main())
