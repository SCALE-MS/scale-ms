# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
  pull_request:
    branches: [ $default-branch ]

jobs:
  simple_local:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m venv $HOME/testenv
        . $HOME/testenv/bin/activate
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -r requirements-testing.txt
        python -m pip install .
        python -m pip install coverage pytest-cov
    - name: Test with pytest
      run: |
        . $HOME/testenv/bin/activate
        export RADICAL_LOG_LVL=DEBUG
        python -X dev -m pytest --cov=scalems --cov-report=xml tests -s
    - name: Command line tests
      run: |
        . $HOME/testenv/bin/activate
        coverage run -m scalems.local --version
        coverage run -m scalems.local --help
        coverage run -m scalems.local examples/basic/echo.py hi there
        python -c 'if open("0000000000000000000000000000000000000000000000000000000000000000/stdout", "r").readline().rstrip() != "hi there": assert False'
    - name: "Upload coverage to Codecov"
      uses: codecov/codecov-action@v1
      with:
        fail_ci_if_error: true
        name: codecov-local-${{ matrix.python-version }}

  containerized_rp:

    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
        # will assign a random free host port
        - 27017/tcp

    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m venv $HOME/testenv
        . $HOME/testenv/bin/activate
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install --upgrade -r requirements-testing.txt
        python -m pip install .
        python -m pip install coverage pymongo pytest-cov
        mkdir -p $HOME/.radical/pilot/configs/
        cp ./docker/resource_local.json $HOME/.radical/pilot/configs/
    - name: Test with pytest
      env:
        RADICAL_PILOT_DBURL: mongodb://root:password@localhost:${{ job.services.mongodb.ports[27017] }}/admin
      run: |
        . $HOME/testenv/bin/activate
        export RADICAL_LOG_LVL=DEBUG
        python -c "import os; import pymongo; print('Create test entry in DB: ', pymongo.MongoClient(os.getenv('RADICAL_PILOT_DBURL')).test.test.insert_one({'x': 10}).inserted_id)"
        python -X dev -m pytest --cov=scalems --cov-report=xml -rA --log-cli-level=info tests --rp-venv $HOME/testenv --rp-resource=local.github --rp-access=local
    - name: Command line tests
      env:
        RADICAL_PILOT_DBURL: mongodb://root:password@localhost:${{ job.services.mongodb.ports[27017] }}/admin
      run: |
        . $HOME/testenv/bin/activate
        coverage run -m scalems.radical --version
        coverage run -m scalems.radical --help
        coverage run -m scalems.radical --venv=$HOME/testenv --resource=local.github --access=local examples/basic/echo.py hello world
        python -c 'if open("0000000000000000000000000000000000000000000000000000000000000000/stdout", "r").readline().rstrip() != "hello world": assert False'
    - name: "Upload coverage to Codecov"
      uses: codecov/codecov-action@v1
      with:
        fail_ci_if_error: true
        name: codecov-radical-${{ matrix.python-version }}

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install . --upgrade
        pip install flake8
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings.
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
        flake8 tests/ --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
