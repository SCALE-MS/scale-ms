@startuml
title Execution layer Worker interface

participant "Higher level framework" as framework

box "Worker Context"
participant "Resource manager" as context
participant "Node Director" as node_director
participant "Node Builder" as node_builder
participant "Result publisher" as publisher
end box

'--> framework: static data resources available
'   note over framework #FFFFFF
'   my_array =
'   69e69fedbdbab6dcda556db6d5835375cefb4e801fb8279d0d7ef3995154bc15: scalems.Integer64
'   endnote
'
'   framework --> context **: provision worker
'
'   rnote over framework #FFFFFF
'   69e69fedbdbab6dcda556db6d5835375cefb4e801fb8279d0d7ef3995154bc15: scalems.Integer64
'   endrnote
'
'   framework -> context: place data

--> framework: work package

    note over framework #FFFFFF
    {
        "version"= "scalems_workflow_1",
        "types"= {
            "scalems.SubprocessInput" = {
                "argv" = { "type"= ["scalems", "String"], "shape"= ["constraints.OneOrMore"] },
                "inputs" = { "type"= ["scalems", "Mapping"], "shape"= [1] },
                "outputs" = { "type"= ["scalems", "Mapping"], "shape"= [1] },
                "stdin" = { "type"= ["scalems", "File"], "shape"= [1] },
                "environment" = { "type"= ["scalems", "Mapping"], "shape"= [1] },
                "resources" = { "type"= ["scalems", "Mapping"], "shape"= [1] }
            },
            "scalems.SubprocessResult" = {
                "exitcode" = { "type"= ["scalems", "Integer"], "shape"= [1] },
                "stdout" = { "type"= ["scalems", "File"], "shape"= [1] },
                "stderr" = { "type"= ["scalems", "File"], "shape"= [1] },
                "file" = { "type"= ["scalems", "Mapping"], "shape"= [1] }
            },
            "scalems.Subprocess" = {
                "input" = { "type": ["scalems", "SubprocessInput"], "shape": [1] },
                "result" = { "type": ["scalems", "SubprocessResult"], "shape": [1] }
            },
        },
        "referents"= [
            {
                "label": "input_files",
                "uid": "aaaa...",
                "type": ["scalems", "Mapping"],
                "data": [{"-i"= ["infile"]}]
            },
            {
                "label": "output_files",
                "uid": "bbbb...",
                "type": ["scalems", "Mapping"],
                "data": [{"-o"= ["outfile"]}]
            },
            {
                "label": "resource_spec",
                "uid": "cccc...",
                "type": ["scalems", "Mapping"],
                "data": []
            },
            {
                "label": "subprocess_input",
                "uid": "dddd...",
                "type": ["scalems", "SubprocessInput"],
                "args": ["myprogram", "--num_threads", "8"],
                "inputs": "aaaa...",
                "outputs": "bbbb...",
                "stdin": null,
                "environment" = [{}],
                "resources" = "cccc..."
            },
            {
                "label"= "command",
                "uid"= "eeee...",
                "type"= ["scalems", "Subprocess"],
                "input"= "dddd...",
                "result"= "eeee..."
            }

        ]
    }
    endrnote


   framework -> context ++: deserialize node


    context -> node_builder **: get_node_builder(uid, inputs)
    activate node_builder
    context -> node_director ++

    node_director -> node_builder: apply node input
    activate node_builder

    alt incomplete && has_dependencies
        node_builder -> context: register subscriptions
    end
    deactivate node_builder

    node_director -> node_builder ++: set up output
    node_builder -> publisher **
    deactivate node_builder

    node_director -> node_builder ++: build()

    publisher -> context: publish
    activate context
    context -> context: subscriptions
    framework <-- context: stage output data
    deactivate context
    deactivate publisher

    node_director <-- node_builder --: node
    context <-- node_director --
    destroy node_builder
    framework <-- context: node
    deactivate context

    [<-- framework: results

@enduml
