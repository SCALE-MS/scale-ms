# Install and test scale-ms package in a Docker container.
#
# We currently use Docker to encapsulate the environment requirements of a
# functional RADICAL Pilot installation. We are not yet able to stage the scalems
# package into this environment or provide simple dispatching from a non-RP
# client environment, so we build an image containing both the scalems package
# and the test scripts, then make static use of that container.

language: python
python: "3.8"

git:
  depth: 1

jobs:
  include:
    - name: "Lint"
      install:
        - pip install --upgrade pip setuptools
        - pip install flake8
      script:
        - python -m flake8 --max-line-length 120 src/
        - python -m flake8 --max-line-length 120 tests/
#        - python -m flake8 --max-line-length 120 examples/
    - name: "Local execution"
      # No RP dispatching.
      install:
        - pip install --upgrade pip setuptools
        - pip install -r requirements-testing.txt
        - pip install .
      script:
        - pytest tests -s
    - name: "RP dispatching (fully containerized local)"
      # All tests run, if possible. local.localhost and radical resources should be detected and used for local dispatching in the container.
      env: RPREF="project/scalems"
      services:
        - docker
      install:
        # Eventually, the rp-complete image should not change much and can reasonably be cached or pulled.
        - docker pull scalems/rp-complete
        - (cd docker && docker build --cache-from scalems/rp-complete -t scalems/rp-complete -f rp-complete.dockerfile --build-arg RPREF=$RPREF .)
        # The scalems-rp image needs to be rebuilt for every commit because it contains the updated
        # scalems package and test scripts.
        - docker build -t scalems-rp -f docker/scalems-rp.dockerfile .
      script:
        - docker run --rm --name scalems_test -u root -d scalems-rp
        - docker ps
        - sleep 5
        # TODO: Use static local venv.
        # The RP environment should be detected and additional tests should run.
        - docker exec -ti -u rp scalems_test bash -c "cd && . rp-venv/bin/activate && python -m pytest --full-trace scalems/tests -s"
        - docker kill scalems_test
    - name: "RP dispatching (executor containerized)"
      # Both the client and execution host are separate docker containers.
      env: RPREF="project/scalems"
      services:
        - docker
      install:
        - docker pull mongo:bionic
        - docker pull scalems/radicalpilot
        - (cd docker && docker build --cache-from scalems/radicalpilot -t scalems/radicalpilot -f radicalpilot.dockerfile .)
        - docker-compose -f docker/compose.yml up -d mongo login compute
        - docker-compose -f docker/compose.yml ps
        - ssh-keygen -f tempkey -N ''
        - cat tempkey.pub | docker-compose -f docker/compose.yml exec -u rp -T login bash -c 'cat - >> /home/rp/.ssh/authorized_keys'
        - eval "$(ssh-agent -s)"
        - ssh-add tempkey
        - ssh-keyscan -p 2345 127.0.0.1 >> ~/.ssh/known_hosts
        - ssh -l rp -p 2345 127.0.0.1 echo ssh connection sucessful
        - scp -P 2345 -r tests rp@127.0.0.1:/home/rp/scalems_tests
      script:
        - docker-compose -f docker/compose.yml exec -u rp login \
          bash -c "cd ~/scalems_tests && . ~/rp-venv/bin/activate && pytest --full-trace -s --rp-resource local.docker --rp-access ssh"
        - docker-compose -f docker/compose.yml down
    - name: "RP dispatching (Travis-CI env local)"
      # Local RP client connects to execution host in a docker container (tunnel to the "login" service).
      env: RPREF="project/scalems"
      services:
        - docker
      install:
        - docker pull scalems/radicalpilot
        - (cd docker && docker build --cache-from scalems/radicalpilot -t scalems/radicalpilot -f radicalpilot.dockerfile .)
        - docker-compose -f docker/compose.yml up -d mongo login compute
        - docker-compose -f docker/compose.yml ps
        - ssh-keygen -f tempkey -N ''
        - cat tempkey.pub | docker-compose -f docker/compose.yml exec -u rp -T login bash -c 'cat - >> /home/rp/.ssh/authorized_keys'
        - eval "$(ssh-agent -s)"
        - ssh-add tempkey
        - ssh-keyscan -p 2345 127.0.0.1 >> ~/.ssh/known_hosts
        - ssh -l rp -p 2345 127.0.0.1 echo ssh connection sucessful
        - mkdir -p ~/.radical/pilot/configs
        # We can just use the localhost:2345 that is exposed by the `login` docker-compose service.
        - cat docker/resource_local.json | sed 's/22222/2345/' > ~/.radical/pilot/configs/resource_local.json
        - python3 -m pip install --user tox
      script:
        - export RADICAL_PILOT_DBURL="mongodb://root:password@127.0.0.1:27017/admin"
        # Let tox manage the venv for us.
        - tox -vvv -e py38 -- tests --rp-resource=local.tunnel --rp-access=ssh
        - docker-compose -f docker/compose.yml down
    - name: "RP master dependency"
      env: RPREF="master"
      services:
        - docker
      install:
        - docker pull scalems/rp-complete
        - (cd docker && docker build --cache-from scalems/rp-complete -t scalems/rp-complete -f rp-complete.dockerfile --build-arg RPREF=$RPREF .)
      script:
        - docker run --rm --name rp_test -u root -d scalems/rp-complete
        - docker ps
        - sleep 5
        - docker exec -ti -u rp rp_test bash -c "cd && . /home/rp/rp-venv/bin/activate && python radical.pilot/examples/00*"
        - docker exec -ti -u rp rp_test bash -c "cd && . /home/rp/rp-venv/bin/activate && python radical.pilot/examples/misc/raptor.py radical.pilot/examples/misc/raptor.cfg"
        - docker kill rp_test
# TODO: Enable when rp/raptor is released.
#    - name: "RP master dispatching"
#      env: RPREF="master"
#      services:
#        - docker
#      install:
#        - docker pull scalems/rp-complete
#        - (cd docker && docker build --cache-from scalems/rp-complete -t scalems/rp-complete -f rp-complete.dockerfile --build-arg RPREF=$RPREF .)
#        - docker build -t scalems-rp -f docker/scalems-rp.dockerfile .
#      script:
#        - docker run --rm --name scalems_test -u root -d scalems-rp
#        - docker ps
#        - sleep 5
#        - docker exec -ti scalems_test bash -c ". rp-venv/bin/activate && python -m pytest --full-trace scalems/tests -s"
#        - docker kill scalems_test

before_install:
  - uname -a
  - ulimit -a
  - python -V
