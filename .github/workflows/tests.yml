# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
  pull_request:
    branches: [ $default-branch ]

jobs:
  rp_ssh:

    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      mongodb:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
        # will assign a random free host port
        - 27017/tcp
    env:
      GROMACS: release-2023
      GMXAPI: "gmxapi"
      GMX_MPI: "ON"

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Prepare OS
      run: |
        sudo apt-get update
        sudo apt-get install ccache libblas-dev libfftw3-dev liblapack-dev libmpich-dev libxml2-dev mpich ninja-build
    - name: Prepare ssh
      # Ref: https://stackoverflow.com/questions/60066477/self-connecting-via-ssh-on-github-actions
      run: |
        ssh-keygen -f ~/.ssh/id -t ed25519 -N ''
        echo -n 'from="127.0.0.1" ' | cat - ~/.ssh/id.pub > ~/.ssh/authorized_keys
        ssh-keyscan 127.0.0.1 >> ~/.ssh/known_hosts
        chmod og-rw ~
        ls -la ~/.ssh
        # Test:
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id
        ssh 127.0.0.1 env
    - uses: actions/checkout@v3
    - name: Prepare ccache variables
      id: ccache_cache
      run: |
        echo "timestamp=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_OUTPUT
        echo "dir=$(ccache -k cache_dir)" >> $GITHUB_OUTPUT
    - name: ccache cache files
      uses: actions/cache@v3
      with:
        path: ${{ steps.ccache_cache.outputs.dir }}
        key: ${{ env.GROMACS }}-MPI-${{ env.GMX_MPI }}-ccache-${{ steps.ccache_cache.outputs.timestamp }}
        restore-keys: |
          ${{ env.GROMACS }}-MPI-${{ env.GMX_MPI }}-ccache-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # caching pip dependencies
    - name: Increase file limit
      run: |
        sudo sysctl -w fs.file-max=65536
        ulimit -a
    - name: Install dependencies
      timeout-minutes: 10
      run: |
        sudo apt-get update && sudo apt-get install libopenmpi-dev openmpi-bin
        which mpiexec
        python -m venv $HOME/testenv
        . $HOME/testenv/bin/activate
        echo `which python`
        python --version
        python -m pip install --upgrade pip setuptools wheel
        pip uninstall -y radical.pilot radical.saga radical.utils
        pip install --upgrade -r requirements-testing.txt
        pip install .
        pip install coverage pymongo pytest-cov
        mkdir -p $HOME/.radical/pilot/configs/
        cp ./.github/workflows/resource_local.json $HOME/.radical/pilot/configs/
        pip freeze
        radical-stack
    - name: Install GROMACS and gmxapi
      run: |
        ccache -s
        . ${GITHUB_WORKSPACE}/ci_scripts/set_compilers
        BRANCH="${GROMACS}" bash -x ${GITHUB_WORKSPACE}/ci_scripts/install_gromacs_branch.sh
        pip install "cmake>=3.16" "pybind11>=2.6" "setuptools>=42.0" "wheel"
        source $HOME/install/gromacs-${GROMACS}/bin/GMXRC
        pip install --verbose "${{ env.GMXAPI }}"
        ccache -s
        python -c "import gmxapi; print(gmxapi.__version__)"
    - name: Test local.github with pytest
      timeout-minutes: 20
      env:
        RADICAL_PILOT_DBURL: mongodb://root:password@localhost:${{ job.services.mongodb.ports[27017] }}/admin
      run: |
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id
        . $HOME/testenv/bin/activate
        export RADICAL_LOG_LVL=DEBUG
        python -m coverage --version
        python -c "import os; import pymongo; print('Create test entry in DB: ', pymongo.MongoClient(os.getenv('RADICAL_PILOT_DBURL')).test.test.insert_one({'x': 10}).inserted_id)"
        ulimit -n 65536
        echo "HOME=$HOME"
        ls $HOME
        pwd
        ls
        python -X dev -m pytest -x \
          --cov --cov-config=.coveragerc --cov-report=xml:coverage.xml \
          -rA -l --full-trace --log-cli-level=debug \
          tests \
          --rp-venv $HOME/testenv --rp-resource=local.github --rp-access=ssh
        cd scalems-remote-coverage-dir
        cp coverage_dir/.coverage* ./
        coverage combine --keep
        coverage xml --rcfile=../.coveragerc -o coverage-remote.xml
        cd ..
    - name: Command line tests
      timeout-minutes: 5
      env:
        RADICAL_PILOT_DBURL: mongodb://root:password@localhost:${{ job.services.mongodb.ports[27017] }}/admin
      run: |
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id
        . $HOME/testenv/bin/activate
        coverage --version
        coverage run -m scalems.radical --version
        coverage run --append -m scalems.radical --help
        # We clean the working directory now, but we will need better handling for
        # output data with #292. This and the output check below will need to be
        # further updated soon.
        rm -rf 000*
        coverage run --source=scalems,examples --append -m scalems.radical --venv=$HOME/testenv --resource=local.github --access=ssh --pilot-option cores=1 --pilot-option gpus=0 examples/basic/echo.py hello world
        stdout=$(echo 0*/stdout)
        python -c "if open('${stdout}', 'r').readline().rstrip() != 'hello world': assert False"
        rm -rf 000*
        coverage run --source=scalems,examples --append examples/basic_pipeline/echo-pipeline.py --venv=$HOME/testenv --resource=local.github --access=ssh --pilot-option cores=4 --pilot-option gpus=0 -o final.txt hello world
        python -c "if open('final.txt', 'r').readline().rstrip() != 'hello world': assert False"
        coverage xml -o coverage2.xml
    - name: "Upload coverage to Codecov"
      continue-on-error: true
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        name: codecov-rp-ssh-${{ matrix.python-version }}
    - name: Collect artifacts
      if: ${{ always() }}
      run: |
        tar zcf ~/sessions.tgz --exclude '*.tgz' --exclude '*.tar.gz' --exclude '*.pyc' $HOME/radical.pilot.sandbox/rp.session.* ./rp.session.*
    - name: "Upload artifacts"
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.job }}-${{ matrix.python-version }}
        path: '~/sessions.tgz'

  rp_ssh_head:

    runs-on: ubuntu-latest
    timeout-minutes: 25
    services:
      mongodb:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
        # will assign a random free host port
        - 27017/tcp

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - name: Prepare ssh
      # Ref: https://stackoverflow.com/questions/60066477/self-connecting-via-ssh-on-github-actions
      run: |
        ssh-keygen -f ~/.ssh/id -t ed25519 -N ''
        echo -n 'from="127.0.0.1" ' | cat - ~/.ssh/id.pub > ~/.ssh/authorized_keys
        ssh-keyscan 127.0.0.1 >> ~/.ssh/known_hosts
        chmod og-rw ~
        ls -la ~/.ssh
        # Test:
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id
        ssh 127.0.0.1 env
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # caching pip dependencies
    - name: Increase file limit
      run: |
        sudo sysctl -w fs.file-max=65536
        ulimit -a
    - name: Install dependencies
      timeout-minutes: 10
      run: |
        sudo apt-get update && sudo apt-get install libopenmpi-dev openmpi-bin
        which mpiexec
        python -m venv $HOME/testenv
        . $HOME/testenv/bin/activate
        python -m pip install --upgrade pip setuptools wheel
        pip uninstall -y radical.pilot
        pip install --upgrade --force \
          git+https://github.com/radical-cybertools/radical.pilot.git@devel#egg=radical.pilot
        pip install .
        pip install --upgrade \
          build \
          coverage \
          'pymongo<4' \
          'pytest>=6.1.2' \
          'pytest-asyncio>=0.14' \
          pytest-cov \
          pytest-env
        mkdir -p $HOME/.radical/pilot/configs/
        cp ./.github/workflows/resource_local.json $HOME/.radical/pilot/configs/
        pip freeze
        radical-stack
    - name: Test local.github with pytest
      timeout-minutes: 20
      env:
        RADICAL_PILOT_DBURL: mongodb://root:password@localhost:${{ job.services.mongodb.ports[27017] }}/admin
      run: |
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id
        . $HOME/testenv/bin/activate
        export RADICAL_LOG_LVL=DEBUG
        python -c "import os; import pymongo; print('Create test entry in DB: ', pymongo.MongoClient(os.getenv('RADICAL_PILOT_DBURL')).test.test.insert_one({'x': 10}).inserted_id)"
        ulimit -n 65536
        echo "HOME=$HOME"
        ls $HOME
        pwd
        ls
        python -m coverage --version
        python -X dev -m pytest -x \
          --cov=scalems --cov-report=xml:coverage.xml \
          -rA -l --full-trace --log-cli-level=debug \
          tests \
          --rp-venv $HOME/testenv --rp-resource=local.github --rp-access=ssh \
          --experimental --exhaustive
    - name: Command line tests
      timeout-minutes: 5
      env:
        RADICAL_PILOT_DBURL: mongodb://root:password@localhost:${{ job.services.mongodb.ports[27017] }}/admin
      run: |
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id
        . $HOME/testenv/bin/activate
        coverage --version
        coverage run -m scalems.radical --version
        coverage run --append -m scalems.radical --help
        # We clean the working directory now, but we will need better handling for
        # output data with #292. This and the output check below will need to be
        # further updated soon.
        rm -rf 000*
        coverage run --source=scalems,examples --append -m scalems.radical --venv=$HOME/testenv --resource=local.github --access=ssh --pilot-option cores=1 --pilot-option gpus=0 examples/basic/echo.py hello world
        stdout=$(echo 0*/stdout)
        python -c "if open('${stdout}', 'r').readline().rstrip() != 'hello world': assert False"
        rm -rf 000*
        RADICAL_LOG_LVL=DEBUG coverage run --source=scalems,examples --append examples/basic_pipeline/echo-pipeline.py --venv=$HOME/testenv --resource=local.github --access=ssh --pilot-option cores=4 --pilot-option gpus=0 --log-level DEBUG -o final.txt hello world
        python -c "if open('final.txt', 'r').readline().rstrip() != 'hello world': assert False"
        coverage xml -o coverage2.xml
    - name: "Upload coverage to Codecov"
      continue-on-error: true
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        name: codecov-rp-ssh-${{ matrix.python-version }}
    - name: Collect artifacts
      if: ${{ always() }}
      run: |
        tar zcf ~/sessions.tgz --exclude '*.tgz' --exclude '*.tar.gz' --exclude '*.pyc' $HOME/radical.pilot.sandbox/rp.session.* ./rp.session.*
    - name: "Upload artifacts"
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.job }}-${{ matrix.python-version }}
        path: '~/sessions.tgz'

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 4
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # caching pip dependencies
    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install libopenmpi-dev openmpi-bin
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements-testing.txt
        pip install .
    - name: Lint with flake8
      run: |
        flake8 src/ --count --show-source --statistics
        flake8 tests/ --count --show-source --statistics
